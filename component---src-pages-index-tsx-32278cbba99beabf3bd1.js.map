{"version":3,"file":"component---src-pages-index-tsx-32278cbba99beabf3bd1.js","mappings":"wKAEO,SAASA,EAAQC,GACtB,OAAOA,EAAEC,WAAWC,SAAS,EAAG,IAGlC,CAAO,IAAMC,EAA2B,SAACC,EAAKC,EAAOC,GACnD,OAAUD,EAAV,IAAmBD,EAAnB,IAA0BE,CADrB,ECJA,SAASC,EAASC,EAAYC,GACnC,ODOK,SACLD,EACAE,QACQ,IADRA,IAAAA,EAAsBP,GAEtB,IAAMQ,EAAO,IAAIC,KAAKJ,GAChBJ,EAAMO,EAAKE,UACXR,EAAQM,EAAKG,WAAa,EAC1BR,EAAOK,EAAKI,cAClB,OAAOL,EAAMX,EAAQK,GAAML,EAAQM,GAAQC,EAAKL,WACjD,CChBQe,CACLR,GACA,SAACJ,EAAKC,EAAOC,GAAb,UAA0BA,EAA1B,IAAkCD,EAAlC,IAA2CD,EAA3C,IAAkDK,CAFnC,GAIlB,C,cCSKQ,EAAmB,SAAC,GAAoD,IAAlDC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,QACvC,GAAmB,MAAfD,EACF,OAAO,KAGT,IAAQP,EAAiCO,EAAjCP,KAAMF,EAA2BS,EAA3BT,KAAMW,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,UAC3B,OAAKV,GAASF,GAASW,GAAUC,EAG/BC,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,IAAAA,CAAGC,KAAMhB,EAASI,EAAMF,IAAQW,GAChCE,EAAAA,cAAAA,IAAAA,KAAIH,GAAoBG,EAAAA,cAAAA,KAAAA,QALuB,IANrD,EA2CA,GAAeE,EAAAA,EAAAA,IA3BG,SAAC,GAAgD,IAA9CC,EAA8C,EAA9CA,KACXC,GAAUD,aAAlB,EAAkBA,EAAME,mBAAhBD,MACR,OACEJ,EAAAA,cAACA,EAAAA,SAAD,KACGI,EAAME,KAAI,SAACC,GAAD,aACTP,EAAAA,cAACL,EAAD,eAAkBa,IAAG,SAAUD,SAAV,UAAUA,EAAMX,mBAAhB,aAAUa,EAAmBtB,OAAYoB,GAD/D,IAJP,G","sources":["webpack://adhd-at-33/./src/utils/format-date.ts","webpack://adhd-at-33/./src/utils/blog-path.ts","webpack://adhd-at-33/./src/pages/index.tsx"],"sourcesContent":["export type dateFormatFn = (day: string, month: string, year: string) => string;\n\nexport function padZero(n: number): string {\n  return n.toString().padStart(2, \"0\");\n}\n\nexport const defaultFmt: dateFormatFn = (day, month, year) => {\n  return `${month}/${day}/${year}`;\n};\n\nexport function formatDate(\n  ds: string,\n  fmtFn: dateFormatFn = defaultFmt\n): string {\n  const date = new Date(ds);\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  const year = date.getFullYear();\n  return fmtFn(padZero(day), padZero(month), year.toString());\n}\n","import { formatDate } from \"./format-date\";\n\nexport function blogPath(ds: string, slug: string): string {\n  return formatDate(\n    ds,\n    (day, month, year) => `/${year}/${month}/${day}/${slug}`\n  );\n}\n","import React from \"react\";\nimport { blogPath } from \"../utils/blog-path\";\nimport { graphql, PageProps } from \"gatsby\";\nimport { withPageLayout } from \"../components/with-page-layout\";\n\ntype BlogEntrySummaryProps = {\n  key: string;\n  readonly frontmatter: {\n    readonly date: string | null;\n    readonly slug: string | null;\n    readonly title: string | null;\n    readonly published: boolean | null;\n  } | null;\n  readonly excerpt: string | null;\n};\n\nconst BlogEntrySummary = ({ frontmatter, excerpt }: BlogEntrySummaryProps) => {\n  if (frontmatter == null) {\n    return null;\n  }\n\n  const { date, slug, title, published } = frontmatter;\n  if (!date || !slug || !title || !published) return null;\n\n  return (\n    <div>\n      <a href={blogPath(date, slug)}>{title}</a>\n      <p>{excerpt ? excerpt : <br />}</p>\n    </div>\n  );\n};\n\nconst IndexPage = ({ data }: PageProps<Queries.IndexPageQuery>) => {\n  const { nodes } = data?.allMarkdownRemark;\n  return (\n    <React.Fragment>\n      {nodes.map((node) => (\n        <BlogEntrySummary key={`node-${node?.frontmatter?.slug}`} {...node} />\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport const pageQuery = graphql`\n  query IndexPage {\n    allMarkdownRemark {\n      nodes {\n        frontmatter {\n          date\n          slug\n          title\n          published\n        }\n        excerpt\n      }\n    }\n  }\n`;\n\nexport default withPageLayout(IndexPage);\n"],"names":["padZero","n","toString","padStart","defaultFmt","day","month","year","blogPath","ds","slug","fmtFn","date","Date","getDate","getMonth","getFullYear","formatDate","BlogEntrySummary","frontmatter","excerpt","title","published","React","href","withPageLayout","data","nodes","allMarkdownRemark","map","node","key","_node$frontmatter"],"sourceRoot":""}